function [train, test] = extractCNNFeatures(params)
run(fullfile('..','matconvnet-1.0-beta25', 'matlab', 'vl_setupnn.m')) ;

% download a pre-trained CNN from the web (needed once).
%     urlwrite(...
%     'http://www.vlfeat.org/matconvnet/models/imagenet-vgg-f.mat', ...
%     'imagenet-vgg-f.mat');

net = load('imagenet-vgg-f.mat');

%     vl_simplenn_display(net) ;

params.net = net;

% layers
% 21-fc8: 1000
% 20-relu7: 8x8x64=4096
% 18-relu6: 8x8x64=4096
% 16-pool5: 12x12x64=6x6x256
% 15-relu5: 26x26x64=13x13x256
% 13-relu4: 26x26x64=13x13x256
% 11-relu3: 26x26x64=13x13x256
% 9 -pool2: 26x26x64=13x13x256
% 5 -pool1: 27x27x64

nf = 64;
% hard code final size
fiCommon = 26; %set based on layer size of CNN model
fjCommon = 26;

train.pool1 = zeros(100, nf, fiCommon+1, fjCommon+1);
test.pool1 = zeros(100, nf, fiCommon+1, fjCommon+1);

train.pool2 = zeros(100, nf, fiCommon, fjCommon);
test.pool2 = zeros(100, nf, fiCommon, fjCommon);

train.relu3 = zeros(100, nf, fiCommon, fjCommon);
test.relu3 = zeros(100, nf, fiCommon, fjCommon);

train.relu4 = zeros(100, nf, fiCommon, fjCommon);
test.relu4 = zeros(100, nf, fiCommon, fjCommon);

fiPool5 = 12; %set based on layer size of CNN model
fjPool5 = 12;

train.pool5 = zeros(100, nf, fiPool5, fjPool5);
test.pool5 = zeros(100, nf, fiPool5, fjPool5);

% hard code final size
fiRelu6_7 = 8; %set based on layer size of CNN model
fjRelu6_7 = 8;

train.relu6 = zeros(100, nf, fiRelu6_7, fjRelu6_7);
test.relu6 = zeros(100, nf, fiRelu6_7, fjRelu6_7);

train.relu7 = zeros(100, nf, fiRelu6_7, fjRelu6_7);
test.relu7 = zeros(100, nf, fiRelu6_7, fjRelu6_7);

train.fc8 = zeros(100, 1000);
test.fc8 = zeros(100, 1000);

train.labels = [];
train.count = 0;
train.file =[];

test.labels = [];
test.count = 0;
test.file = [];

load([params.dataFolder 'splits.mat'],'splits'); % splits variable is loading here
data = [params.dataFolder 'wrgbd-dataset_eval']; % grab all categories in data folder
testInstances = splits(:,params.split); % splits variable loads at loading line above

categories = dir(data);
numCategories = length(categories);

catNum = 0;
for catInd = 1:numCategories
    if mod(catInd, 5) == 0
        disp(['---Category: ' num2str(catInd) ' out of ' num2str(numCategories) '---']);
    end
    if isValid(categories(catInd).name)
        catNum = catNum+1;
        % grab all instances within this category
        fileCatName = [data '/' categories(catInd).name];
        instance = dir(fileCatName);
        for instInd = 1:length(instance)
            if isValid(instance(instInd).name)
                % check if a testing instance then take data
                fileInstName = [fileCatName '/' instance(instInd).name ];
                if testInstances(catNum) == str2double(instance(instInd).name(regexp(instance(instInd).name,'[0-9]')))
                    test = addInstance(fileInstName, catNum, test, params);
                else
                    train = addInstance(fileInstName, catNum, train, params);
                end
            end
        end
    end
end

train = cutData(train);
test = cutData(test);
return

function data = addInstance(fileInstName, catNum, data, params)


if strcmp( params.dataType, 'rgb')
    searchStr = '/*_crop.png';
else
    searchStr = '/*_depthcrop.png';
end
instanceData = getValidInds(dir([fileInstName searchStr]), fileInstName); %get all instance data
subSampleInds = 1:1:length(instanceData); %subsample, take 1 in 1 (for the exact evaluation dataset of the Washington RGB-D)

% set the labels
data.labels = [data.labels ones(1,length(subSampleInds))*catNum];
for imgInd = subSampleInds
    data.count = data.count + 1;
    
    % read in our file from disk
    fileImgName = [fileInstName '/' instanceData(imgInd).name];
    img = imread(fileImgName);
    
    startInd = max(strfind(instanceData(imgInd).name,'_'));
    maskImgName = [fileInstName '/' instanceData(imgInd).name(1:startInd) 'maskcrop.png'];
    mask = imread(maskImgName);
    
    if strcmp( params.dataType, 'depth')
        img = depthImageInterpolation(img, mask);
        
        [Nx,Ny,Nz] = surfnorm(img);
        img = zeros([size(Nx), 3]);
        img(:,:,1) = Nx; img(:,:,2) = Ny; img(:,:,3) = Nz;
        img = scaleNorm(img, 0, 255);
        img = uint8(img);
    end
    
    %         % hard code the image resize
    sz = params.net.meta.normalization.imageSize(1:2);
    img = imresize(img, sz);
    
    img = single(img);
    if params.normalize %normalize the image
        img = img - params.net.meta.normalization.averageImage ;
    end
    
    res = vl_simplenn(params.net, img) ;
    
    layers = [5, 9, 11, 13, 16, 18, 20, 21];
    fSizes = [27, 26, 26, 26, 12, 8, 8, 1];
    numFilts = [64, 64, 64, 64, 64, 64, 64, 1000];
    for i=1:length(layers)
        fim = squeeze(gather(res(layers(i)).x));
        fim = reshape(fim, [numFilts(i), fSizes(i), fSizes(i)]);
        
        if data.count > size(data.relu4, 1)
            data.pool1(end*2, end, end) = 0;
            data.pool2(end*2, end, end) = 0;
            data.relu3(end*2, end, end) = 0;
            data.relu4(end*2, end, end) = 0;
            data.pool5(end*2, end, end) = 0;
            data.relu6(end*2, end, end) = 0;
            data.relu7(end*2, end, end) = 0;
            data.fc8(end*2, end, end) = 0;
        end
        
        switch layers(i) % add these features to data
            case 5 % pool1
                data.pool1(data.count,:) = fim(:);
            case 9 % pool2
                data.pool2(data.count,:) = fim(:);
            case 11 % relu3
                data.relu3(data.count,:) = fim(:);
            case 13 % relu4
                data.relu4(data.count,:) = fim(:);
            case 16 % pool5
                data.pool5(data.count,:) = fim(:);
            case 18 % relu6
                data.relu6(data.count,:) = fim(:);
            case 20 % relu7
                data.relu7(data.count,:) = fim(:);
            case 21 % fc8
                data.fc8(data.count,:) = fim(:);
        end
    end
    
    % add for sanity check
    data.file{end+1} = instanceData(imgInd).name(1:startInd);
end

return

% Since we always increase the data size by doubling it, we use this function to get the right data by subtracting the null data.
function data = cutData(data)
assert(length(data.labels) == data.count);
data.pool1 = data.pool1(1:data.count,:,:,:);
data.pool2 = data.pool2(1:data.count,:,:,:);
data.relu3 = data.relu3(1:data.count,:,:,:);
data.relu4 = data.relu4(1:data.count,:,:,:);
data.pool5 = data.pool5(1:data.count,:,:,:);
data.relu6 = data.relu6(1:data.count,:,:,:);
data.relu7 = data.relu7(1:data.count,:,:,:);
data.fc8 = data.fc8(1:data.count,:,:,:);
return
